<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OscarVGG</title>
  <subtitle>Oscar Gonzalez Greco&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://oscarvgg.com/"/>
  <updated>2017-05-15T21:01:41.000Z</updated>
  <id>http://oscarvgg.com/</id>
  
  <author>
    <name>Oscar Vicente Gonzalez Greco</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flux/Redux inspired architecture with RxSwift</title>
    <link href="http://oscarvgg.com/2017/04/17/redux-inspired-architecture-with-rxswift/"/>
    <id>http://oscarvgg.com/2017/04/17/redux-inspired-architecture-with-rxswift/</id>
    <published>2017-04-16T22:00:00.000Z</published>
    <updated>2017-05-15T21:01:41.000Z</updated>
    
    <content type="html">&lt;p&gt;React-Redux is a great architecture for the web, but how great is it for iOS apps?&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Not long ago, when I was about to start working on an iPad app for a new client, I stumbled upon this &lt;a href=&quot;https://www.youtube.com/watch?v=Oau4JjJP3nA&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;video&lt;/a&gt;, and this &lt;a href=&quot;https://news.realm.io/news/benji-encz-unidirectional-data-flow-swift/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;other one&lt;/a&gt;. They talked about the benefits of Redux, and how great it would be to borrow some ideas for developing iOS apps. After doing some research, and finding some frameworks that pretend to implement React-Redux with Swift. I realised, that the framework is way too opinionated for my taste, and decided to write my own thing.&lt;/p&gt;
&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;Flux and Redux, enforce the concept of unidirectional data flow. This is a great idea, because it keeps the architecture cleaner and easier to maintain.&lt;/p&gt;
&lt;p&gt;[architecture image]&lt;/p&gt;
&lt;p&gt;It consisted of three fundamental pieces: The view, represented by view controllers, the use case, which would work similarly to the reducers in Redux, the data, a layer composed by objects that provide information relevant to the app, and finally, the state store, in charge of applying the new states. To tie it all together, I used RxSwift.&lt;/p&gt;
&lt;h3 id=&quot;The_view&quot;&gt;&lt;a href=&quot;#The_view&quot; class=&quot;headerlink&quot; title=&quot;The view&quot;&gt;&lt;/a&gt;The view&lt;/h3&gt;&lt;p&gt;The views are just UIViews and/or UIViewControllers. Here, you can go as simple or complex as you want. Use a single, multiple, embed them, you name it. The important thing is that they display the information according to the state and call the corresponding use case to each user action.&lt;/p&gt;
&lt;h3 id=&quot;The_Use_Case&quot;&gt;&lt;a href=&quot;#The_Use_Case&quot; class=&quot;headerlink&quot; title=&quot;The Use Case&quot;&gt;&lt;/a&gt;The Use Case&lt;/h3&gt;&lt;p&gt;The use case is where the logic of the app relies. They also communicate to the databases or any other source of information relevant to the system, and push the state changes into the State Store.&lt;/p&gt;
&lt;h3 id=&quot;The_Data_Source&quot;&gt;&lt;a href=&quot;#The_Data_Source&quot; class=&quot;headerlink&quot; title=&quot;The Data Source&quot;&gt;&lt;/a&gt;The Data Source&lt;/h3&gt;&lt;p&gt;The data source(s) are all the structures responsible for retrieving the information that feeds the app, for example, a class that gets data from a database would be the most popular example of a data source. However, it could be any input data. For instance, I recently worked on a project where a significant amount of the data, came from the readings of a drone. Therefore, don’t think about the sources as just data bases or web services, it could be any form of information feeding the app.&lt;/p&gt;
&lt;h3 id=&quot;The_State_Store&quot;&gt;&lt;a href=&quot;#The_State_Store&quot; class=&quot;headerlink&quot; title=&quot;The State Store&quot;&gt;&lt;/a&gt;The State Store&lt;/h3&gt;&lt;p&gt;This is the data structure that holds the State of the system, and sends it to it’s subscribers when changes are made.&lt;/p&gt;
&lt;p&gt;The state could be just be a &lt;code&gt;struct&lt;/code&gt; that contain the values relevant to the system.&lt;/p&gt;
&lt;p&gt;The use cases submit the updated value of the state to the store and then sends it to the subscribed objects (the views, usually).&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;This architecture makes it easier to keep concerns separated and focused, which is great for maintenance and testing. However, I wouldn’t recommend it for smaller projects as it adds unnecessary complexity. For bigger projects, it may work fine to some extend, but I really haven’t tried it yet. In my opinion, it works best for medium size projects, which is most of the size of iOS apps.&lt;/p&gt;
&lt;p&gt;If you want to see an example of all this ideas working, check out the playground file in the following link.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/oscarvgg/redux-inspired-architecture-ios&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/oscarvgg/redux-inspired-architecture-ios&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’m always eager to read your comments about this sort of things, so please let me know in the comments section below what do you like or what would you change.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;React-Redux is a great architecture for the web, but how great is it for iOS apps?&lt;br&gt;
    
    </summary>
    
    
      <category term="architecture, use case, Redux, React, Flux" scheme="http://oscarvgg.com/tags/architecture-use-case-Redux-React-Flux/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="http://oscarvgg.com/2016/10/26/hello-world/"/>
    <id>http://oscarvgg.com/2016/10/26/hello-world/</id>
    <published>2016-10-25T22:00:00.000Z</published>
    <updated>2017-05-15T21:01:47.000Z</updated>
    
    <content type="html">&lt;p&gt;Finally, after a couple of years off, I decided to return to blogging. But this time I’ll take things easy.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first blog I started writing, was back in 2010. I created a personal website in Wordpress, where I used to post things about my life as a Computer Science student and my experience learning iOS development. I used to write during the weekends, putting together tutorials about how to make apps and basic games using Cocos2D. It was fun for me, I felt like I was talking to the world, sharing my knowledge with others. And it didn’t take long until other website called Mobile Orchard, noticed my tutorials and made me an offer to write for them.&lt;/p&gt;
&lt;p&gt;Working for another website was quite an experience, it was my first job. It wasn’t just me anymore, taking all the time I wanted to finish a post, now I had deadlines. I remember, I was suffering every weekend to give birth a tutorial I had to deliver on Sunday night, so it could be published the next day. Eventually, I burned out and quit. The classwork from university and the blogging job were killing me. But my biggest complaint was that it wasn’t fun anymore, and I felt guilty for leaving my own blog for another just for a few bucks. So, I decided to completely stop blogging, at least until I had more time.&lt;/p&gt;
&lt;p&gt;Fast forward to 2014. I was working as an iOS developer. It was a dream come true. I’m not a student anymore, I’m a professional software engineer, building the kind of apps I liked. So, one day a friend proposed me to start blogging again, now with a better plan: build the Spanish version of Envato’s Tuts+. The idea was very appealing to me, because there was no site like that. We created the website with Wordpress again and called it CodeHero, we recruited another three friends and kicked off the blog. At the beginning it was fun, working with my friends in my spear time, writing the kind of posts I wanted, growing a nice community. Until, after a year of work, we realised we were still not making any money. Everyone was so demotivated and at the same time didn’t see each other blogging in the long term. In the end, we decided to abandon the idea and continue with our lives.&lt;/p&gt;
&lt;p&gt;Now, I’m going back to my roots. I’m bringing back to me the joy of writing the blog I want, when I want. But more importantly, it is going to be fun again.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Finally, after a couple of years off, I decided to return to blogging. But this time I’ll take things easy.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
